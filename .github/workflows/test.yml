name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "BACKEND_API_KEYS=test-key-123,another-test-key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=sk-test-key-not-real" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=sk-ant-test-key-not-real" >> $GITHUB_ENV
        echo "ZHIPU_API_KEY=test-zhipu-key" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        echo "REDIS_PORT=6379" >> $GITHUB_ENV
        echo "ALLOWED_ORIGINS=https://test.com" >> $GITHUB_ENV
        
    - name: Run linting
      run: |
        flake8 backend/ src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run type checking
      run: |
        mypy backend/ src/ --ignore-missing-imports
        
    - name: Run security checks
      run: |
        bandit -r backend/ src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=backend --cov=src --cov-report=xml --cov-report=term-missing -m "not slow"
        
    - name: Run integration tests
      run: |
        pytest tests/ -v -m "slow" --maxfail=5
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
          
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up environment variables
      run: |
        echo "BACKEND_API_KEYS=perf-test-key" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=sk-perf-test-key" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=sk-ant-perf-test-key" >> $GITHUB_ENV
        echo "REDIS_HOST=localhost" >> $GITHUB_ENV
        
    - name: Run performance tests
      run: |
        pytest tests/ -v -m "performance" --maxfail=1
        
    - name: Performance benchmark
      run: |
        # Run a simple load test to verify async performance
        python -c "
        import asyncio
        import time
        import httpx
        
        async def test_concurrent_requests():
            async with httpx.AsyncClient() as client:
                start = time.time()
                tasks = [
                    client.get('http://localhost:8000/health')
                    for _ in range(10)
                ]
                await asyncio.gather(*tasks, return_exceptions=True)
                end = time.time()
                print(f'10 concurrent requests took {end - start:.2f} seconds')
        
        # This would need the server running, so it's just a placeholder
        print('Performance benchmark placeholder')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r backend/ src/ -f json -o bandit-report.json
        
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto backend/ src/ --json --output=semgrep-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json 