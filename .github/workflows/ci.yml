name: Cross-Mind Consensus CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Security and Code Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        pip install -r requirements.txt
    
    - name: Security scan with Safety
      run: safety check --json --output safety-report.json || true
    
    - name: Security scan with Bandit
      run: bandit -r backend/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: "*-report.json"

  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy pylint isort
        pip install -r requirements.txt
    
    - name: Code formatting with Black
      run: black --check --diff .
    
    - name: Import sorting with isort
      run: isort --check-only --diff --profile=black .
    
    - name: Linting with flake8
      run: flake8 .
    
    - name: Type checking with mypy
      run: mypy backend/ --ignore-missing-imports || true
    
    - name: Code analysis with pylint
      run: pylint backend/ --rcfile=.pylintrc || true

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio pytest-cov pytest-mock
        pip install -r requirements.txt
    
    - name: Create test environment file
      run: |
        cp env.template .env
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "ENABLE_CACHING=true" >> .env
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=backend --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Performance Testing
  performance-test:
    needs: test
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust
        pip install -r requirements.txt
    
    - name: Start application
      run: |
        cp env.template .env
        echo "REDIS_HOST=localhost" >> .env
        python run.py --mode api --skip-checks &
        sleep 30
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 -t 60s --host=http://localhost:8000
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: "*.html"

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t cross-mind-consensus:test .
    
    - name: Test Docker image
      run: |
        # Use docker compose (newer version) instead of docker-compose
        docker compose up -d
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker compose down

  # Deploy to Staging
  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [security-scan, code-quality, test, performance-test, docker-build]
    runs-on: ubuntu-latest
    # environment: staging  # Comment out until environment is created in GitHub repo settings
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  # Deploy to Production
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [security-scan, code-quality, test, performance-test, docker-build]
    runs-on: ubuntu-latest
    # environment: production  # Comment out until environment is created in GitHub repo settings
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run health checks
      run: |
        echo "Running health checks on production..."
        # Add health check commands here
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch
          
          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false

  # Dependency Updates
  dependency-update:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Update dependencies
      run: |
        pip install pip-tools
        pip-compile --upgrade requirements.in
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'Automated dependency update'
        body: 'Automated dependency update from scheduled job'
        branch: dependency-update 