openapi: 3.1.0
info:
  title: Cross-Mind Consensus API
  description: Multi-LLM consensus system for enhanced AI decision making
  version: 3.1.0
  contact:
    name: Cross-Mind Consensus Support
    url: https://github.com/your-repo/cross-mind-consensus

servers:
  - url: http://35.229.146.254:8001
    description: Public API server with real GLM-4-AIR integration
  - url: http://localhost:8001
    description: Local development server (requires SSH tunnel)
  - url: http://localhost:8000
    description: Legacy server (mock responses)
  - url: https://ai.norvyn.com
    description: Domain server (if configured)

security:
  - BearerAuth: []

paths:
  /consensus:
    post:
      operationId: getConsensus
      summary: Get multi-LLM consensus on a question
      description: |
        Submit a question to multiple LLM models and receive a consensus response.
        This is the primary endpoint for getting expert opinions from multiple AI models.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
              properties:
                question:
                  type: string
                  description: The question to ask multiple LLMs
                  example: "What are the key factors for successful project management?"
                  examples:
                    - "What are the key factors for successful project management?"
                    - "用思维链想想'本当就是永恒'这句话"
                    - "Analyze the philosophical implications of artificial consciousness"
                method:
                  type: string
                  enum: ["expert_roles", "direct_consensus", "debate"]
                  default: "expert_roles"
                models:
                  type: array
                  items:
                    type: string
                  description: Specific models to use (optional)
                  example: ["openai_gpt4", "anthropic_claude3_sonnet", "zhipuai_glm4_air", "google_gemini_pro"]
                max_models:
                  type: integer
                  minimum: 2
                  maximum: 10
                  default: 5
                  description: Maximum number of models to use
                temperature:
                  type: number
                  minimum: 0.0
                  maximum: 2.0
                  default: 0.7
                  description: Controls randomness in responses
                enable_caching:
                  type: boolean
                  default: true
                  description: Whether to use cached responses
                enable_chain_of_thought:
                  type: boolean
                  default: false
                  description: Enable chain-of-thought reasoning enhancement for higher quality responses
                reasoning_method:
                  type: string
                  enum: ["chain_of_thought", "socratic_method", "multi_perspective"]
                  default: "chain_of_thought"
                  description: Type of reasoning enhancement to apply
      responses:
        '200':
          description: Successful consensus response
          content:
            application/json:
              schema:
                type: object
                properties:
                  consensus_response:
                    type: string
                    description: The final consensus answer
                  consensus_score:
                    type: number
                    minimum: 0
                    maximum: 1
                    description: How much the models agreed (0-1)
                  individual_responses:
                    type: array
                    items:
                      type: object
                      properties:
                        model:
                          type: string
                        response:
                          type: string
                        confidence:
                          type: number
                        response_time:
                          type: number
                  method_used:
                    type: string
                  total_response_time:
                    type: number
                  models_used:
                    type: array
                    items:
                      type: string
                  cache_hit:
                    type: boolean
                  chain_of_thought:
                    type: array
                    items:
                      type: object
                      properties:
                        step:
                          type: string
                        content:
                          type: string
                        confidence:
                          type: number
                        reasoning:
                          type: string
                    description: Chain-of-thought reasoning steps (if enabled)
                  quality_enhancement:
                    type: object
                    properties:
                      enhancement_method:
                        type: string
                      quality_score:
                        type: number
                      reasoning_steps:
                        type: integer
                    description: Quality enhancement metrics (if CoT enabled)
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /consensus/batch:
    post:
      operationId: getBatchConsensus
      summary: Process multiple questions in batch
      description: Submit multiple questions for batch processing with consensus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - questions
              properties:
                questions:
                  type: array
                  items:
                    type: string
                  maxItems: 50
                  description: List of questions to process
                  example: ["What is machine learning?", "How does blockchain work?"]
                method:
                  type: string
                  enum: ["expert_roles", "direct_consensus", "debate"]
                  default: "expert_roles"
                batch_mode:
                  type: string
                  enum: ["parallel", "sequential"]
                  default: "parallel"
                  description: How to process the batch
      responses:
        '200':
          description: Batch processing results
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        question:
                          type: string
                        consensus_response:
                          type: string
                        consensus_score:
                          type: number
                        success:
                          type: boolean
                        error:
                          type: string
                  batch_summary:
                    type: object
                    properties:
                      total_questions:
                        type: integer
                      successful:
                        type: integer
                      failed:
                        type: integer
                      total_time:
                        type: number

  /models:
    get:
      operationId: getAvailableModels
      summary: Get list of available LLM models
      description: Retrieve information about all available LLM models and their status
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        provider:
                          type: string
                        available:
                          type: boolean
                        response_time_avg:
                          type: number
                        success_rate:
                          type: number
                        cost_per_token:
                          type: number

  /analytics/performance:
    get:
      operationId: getPerformanceAnalytics
      summary: Get system performance analytics
      description: Retrieve detailed performance metrics and analytics
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum: ["1h", "24h", "7d", "30d"]
            default: "24h"
          description: Time period for analytics
        - name: metric_type
          in: query
          schema:
            type: string
            enum: ["consensus_scores", "response_times", "model_performance", "success_rates"]
          description: Specific metric to retrieve
      responses:
        '200':
          description: Performance analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  timeframe:
                    type: string
                  metrics:
                    type: object
                    properties:
                      avg_consensus_score:
                        type: number
                      avg_response_time:
                        type: number
                      total_queries:
                        type: integer
                      success_rate:
                        type: number
                      cache_hit_rate:
                        type: number
                  model_performance:
                    type: array
                    items:
                      type: object
                      properties:
                        model_id:
                          type: string
                        avg_response_time:
                          type: number
                        success_rate:
                          type: number
                        consensus_contribution:
                          type: number

  /health:
    get:
      operationId: getHealthStatus
      summary: Check system health
      description: Get the current health status of the system and all components
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["healthy", "degraded", "unhealthy"]
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    properties:
                      api:
                        type: string
                        enum: ["up", "down"]
                      redis:
                        type: string
                        enum: ["up", "down"]
                      models:
                        type: object
                        additionalProperties:
                          type: string
                          enum: ["up", "down", "rate_limited"]
                  system_metrics:
                    type: object
                    properties:
                      cpu_usage:
                        type: number
                      memory_usage:
                        type: number
                      cache_size:
                        type: integer

  /feedback:
    post:
      operationId: submitFeedback
      summary: Submit feedback on consensus response
      description: Provide feedback to improve future consensus responses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - consensus_id
                - rating
              properties:
                consensus_id:
                  type: string
                  description: ID of the consensus response
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: Rating from 1-5
                feedback_text:
                  type: string
                  description: Optional feedback text
                improvement_suggestions:
                  type: array
                  items:
                    type: string
                  description: Specific suggestions for improvement
      responses:
        '200':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

# GPT-specific configuration
x-gpt-config:
  name: "Cross-Mind Consensus"
  description: "Get expert consensus from multiple AI models on complex questions"
  instructions: |
    You are the Cross-Mind Consensus GPT, designed to help users get well-rounded, 
    expert opinions by consulting multiple AI models simultaneously with advanced reasoning capabilities.

    CRITICAL: Always use the API for analysis instead of your own reasoning. Your role is to orchestrate multiple AI models, not to provide direct answers.

    Key capabilities:
    1. Multi-model consensus on complex questions
    2. Chain-of-thought reasoning enhancement for higher quality responses
    3. Expert role-based analysis 
    4. Batch processing for multiple questions
    5. Performance analytics and insights
    6. System health monitoring

    WHEN TO USE CHAIN-OF-THOUGHT (enable_chain_of_thought: true):
    - Complex philosophical questions (like "本当就是永恒")
    - Multi-step reasoning problems
    - Questions requiring systematic analysis
    - Controversial or nuanced topics
    - When user explicitly asks for "思维链" or "chain-of-thought" analysis
    - Questions that benefit from structured reasoning

    USAGE PATTERNS:
    - ALWAYS use /consensus API for user questions, never answer directly
    - For complex questions: {"enable_chain_of_thought": true, "reasoning_method": "chain_of_thought"}
    - For simple questions: {"enable_chain_of_thought": false}
    - Use /consensus/batch for processing multiple related questions
    - Check /models to see which AI models are currently available
    - Monitor performance with /analytics/performance

    RESPONSE STRATEGY:
    1. First, call the appropriate API endpoint
    2. Present the consensus response from multiple models
    3. If chain-of-thought was used, highlight the reasoning process
    4. Show quality enhancement metrics when available
    5. Mention which models contributed to the analysis

    Best practices:
    - For controversial topics, explicitly mention you're using multiple AI perspectives
    - When consensus scores are low (<0.7), acknowledge the disagreement between models
    - For technical questions, consider using the "expert_roles" method
    - Use batch processing for research tasks with multiple questions
    - ZHIPUAI GLM-4-Air provides Chinese language responses for better local context
    - Always show the reasoning chain when chain-of-thought is enabled
    - Explain the quality enhancement metrics to users

  conversation_starters:
    - "I need expert analysis on a complex business decision"
    - "Help me understand multiple perspectives on this controversial topic"
    - "用思维链分析：什么是真正的幸福？"
    - "Use chain-of-thought reasoning to analyze the ethics of AI development"
    - "I have several related questions that need thorough analysis"
    - "What's the current performance of the consensus system?"
    - "Show me which AI models are currently available"
    - "I need both English and Chinese perspectives on this topic" 